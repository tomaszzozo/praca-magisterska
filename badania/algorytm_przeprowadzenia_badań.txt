1. Wklej w czat zapytanie z odpowiedniego pliku prompt.txt
2. Dodaj klasę, którą należy pokryć testami.
3. Wyślij zapytanie.
4. Jeżeli wariant z kontekstem - odpowiedz na pytania / dodaj kolejne pliki.
5. Wklej wygenerowany kod do projektu. Jeżeli zostały jeszcze klasy do pokrycia wróć do pkt. 1.
6. Jeżeli kod nie kompiluje się lub test nie kończy się powodzeniem, wprowadź jak najmniejsze potrzebne zmiany aby kod skompilował się / test kończył się powodzeniem. Staraj się nie usuwać logiki oryginalnego testu i nie modyfikuj kodu źródłowego. Zmiany w miarę możliwości udokumentuj.
7. Dodaj odpowiednio adnotację unit (dla wyizolowanych testów) lub integration (dla testów zależnych od obiektów z poza klasy i standardowych bibliotek). Dodaj informację, jaki typ zasugerował czat.
8. Uruchom automatyczne formatowanie kodu w edytorze IntelliJ aby pozbyć się niepotrzebnie załączonych bibliotek i usunąć nadmiarowe linie kodu.
9. Odnotuj niedokładności (// INNACURACY) i liczbę faktycznych przypadków testowych w każdym teście (// CASES)
10. Uruchom testy z włączonym śledzeniem pokrycia.
11. Wygeneruj raport HTML pokrycia kodu testami. Zanotuj pokrycie wszystkich klas.
12. Korzystając z funkcji 'znajdź w plikach' edytora IntelliJ wyszukaj w głównym katalogu testowym frazę '(class|interface|record) [A-Z].+?\{'. Liczba znalezionych wystąpień jest ilością wygenerowanych klas, interfejsów i rekordów testowych. Odnotuj ją.
13. Korzystając z tej samej fukncji wyszukaj w głównym katalogu testowym frazę '^(?![\t ]*@Tag)(?![\t ]*\/).+$'. Liczba znalezionych wystąpień jest ilością wygenerowanych linii kodu z odfiltrowanymi komentarzami i etykietami rodzaju testów. Odnotuj ją.
14. Korzystając z tej samej fukncji wyszukaj w głównym katalogu testowym frazę '@(Parametrized)?Test'. Liczba znalezionych wystąpień jest ilością wygenerowanych metod testowych uwzględniając testy parametryzowane. Odnotuj ją.
15. Korzystając z tej samej fukncji wyszukaj w głównym katalogu testowym frazę '// MISTAKE'. Liczba znalezionych wystąpień jest ilością błędów w wygenerowanym kodzie. Odnotuj ją.
16. Korzystając z tej samej fukncji wyszukaj w głównym katalogu testowym frazę '// INACCURACY'. Liczba znalezionych wystąpień jest ilością niedokładności w wygenerowanym kodzie. Odnotuj ją.
17. Korzystając z komendy 'find . -type f -name "*.java" -exec grep -oh '// cases: [0-9]\+' {} + | awk '{sum += $3} END {print sum}'' zanotuj liczbę wygenerowanych przypadków testowych.
18. Korzystając z komendy 'find . -type f -name "*.java" -exec grep -l '@Tag("unit")' {} + | xargs grep -h '@Test' | wc -l' zanotuj liczbę wygenerowanych testów jednostkowych.
19. Korzystając z komendy 'find . -type f -name "*.java" -exec grep -l '@Tag("integration")' {} + | xargs grep -h '@Test' | wc -l' zanotuj liczbę wygenerowanych testów integracyjnych.
20. Korzystając z komendy 'find . -type f -name "*.java" -print0 | while IFS= read -r -d '' file; do if (grep -q '@Tag("unit")' "$file" && grep -q '// ai tag: integration' "$file") || (grep -q '@Tag("integration")' "$file" && grep -q '// ai tag: unit' "$file"); then echo 1; fi; done | wc -l' zanotuj liczbę niepoprawnie zklasyfikowanych klas testowych.

